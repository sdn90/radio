{"version":3,"sources":["Station.ts","StationList.tsx","App.tsx","Marquee.tsx","serviceWorker.ts","index.tsx"],"names":["STATIONS","id","name","city","streams","url","isCurrentStation","currentStation","station","undefined","StationList","props","react","style","padding","textTransform","fontWeight","fontSize","letterSpacing","margin","color","map","className","concat","onClick","setCurrentStation","LoadingState","Marquee","children","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","Ready","_useState4","loadingState","setLoadingState","_useState5","_useState6","isPlaying","setIsPlaying","_useState7","_useState8","volume","audioRef","useRef","useEffect","onLoadStart","e","Loading","onCanPlay","Success","onError","Error","current","addEventListener","removeEventListener","play","pause","react_default","a","createElement","StationList_StationList","src","ref","border","display","borderRight","width","textAlign","backgroundColor","Marquee_Marquee","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e823e3aa.chunk.js","sourcesContent":["export interface Station {\n  id: number;\n  name: string;\n  city: string;\n  streams: StationStream[];\n}\n\nexport interface StationStream {\n  url: string;\n}\n\nexport const STATIONS: Station[] = [\n  {\n    id: 1,\n    name: \"NTS\",\n    city: \"London\",\n    streams: [\n      { url: \"https://stream-relay-geo.ntslive.net/stream?client=NTSWebApp\" }\n    ]\n  },\n  {\n    id: 2,\n    name: \"Rinse FM\",\n    city: \"London\",\n    streams: [{ url: \"http://206.189.117.157:8000/stream\" }]\n  },\n  {\n    id: 3,\n    name: \"The Lot Radio\",\n    city: \"Brooklyn\",\n    streams: [\n      {\n        url: \"http://thelot.out.airtime.pro:8000/thelot_b\"\n      }\n    ]\n  },\n  {\n    id: 4,\n    name: \"Reprezent Radio\",\n    city: \"London\",\n    streams: [{ url: \"http://radio.canstream.co.uk:8022/live.mp3\" }]\n  },\n  {\n    id: 5,\n    name: \"House FM\",\n    city: \"London\",\n    streams: [{ url: \"https://streamer.radio.co/s0de514535/listen\" }]\n  }\n];\n","import * as React from \"react\";\nimport { Station, STATIONS } from \"./Station\";\nimport \"./StationList.css\";\n\ninterface StationListProps {\n  currentStation: Station | undefined;\n  setCurrentStation: (station: Station) => void;\n}\n\nfunction isCurrentStation(\n  currentStation: Station | undefined,\n  station: Station\n) {\n  if (currentStation === undefined) return false;\n  if (currentStation.id === station.id) return true;\n  return false;\n}\n\nexport default function StationList(props: StationListProps) {\n  return (\n    <div>\n      <div style={{ padding: 8 }}>\n        <h4\n          style={{\n            textTransform: \"uppercase\",\n            fontWeight: 500,\n            fontSize: 14,\n            letterSpacing: \"0.075rem\",\n            margin: 0,\n            color: \"#888\"\n          }}\n        >\n          Stations\n        </h4>\n      </div>\n      {STATIONS.map(station => (\n        <div style={{ padding: 8 }}>\n          <a\n            className={`station-list-item${\n              isCurrentStation(props.currentStation, station)\n                ? \" station-list-item-active\"\n                : \"\"\n            }`}\n            onClick={() => props.setCurrentStation(station)}\n          >\n            {station.name}\n            {isCurrentStation(props.currentStation, station) ? (\n              <span style={{ fontSize: 14, fontWeight: 400 }}>Playing</span>\n            ) : null}\n          </a>\n          <div>{station.city}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Station } from \"./Station\";\nimport StationList from \"./StationList\";\nimport Marquee from \"./Marquee\";\n\nenum LoadingState {\n  Ready,\n  Loading,\n  Success,\n  Error\n}\n\nconst App: React.FC = () => {\n  const [currentStation, setCurrentStation] = useState<Station | undefined>(\n    undefined\n  );\n  const [loadingState, setLoadingState] = useState<LoadingState>(\n    LoadingState.Ready\n  );\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  // player source loading states\n  useEffect(() => {\n    const onLoadStart = (e: Event) => setLoadingState(LoadingState.Loading);\n    const onCanPlay = (e: Event) => setLoadingState(LoadingState.Success);\n    const onError = (e: Event) => setLoadingState(LoadingState.Error);\n\n    if (audioRef.current) {\n      audioRef.current.addEventListener(\"loadstart\", onLoadStart);\n      audioRef.current.addEventListener(\"canplay\", onCanPlay);\n      audioRef.current.addEventListener(\"error\", onError);\n    }\n\n    return function() {\n      if (audioRef.current) {\n        audioRef.current.removeEventListener(\"loadstart\", onLoadStart);\n        audioRef.current.removeEventListener(\"canplay\", onCanPlay);\n        audioRef.current.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n\n  // autoplay selected station\n  useEffect(() => {\n    if (audioRef.current) {\n      setIsPlaying(true);\n      audioRef.current.play();\n    }\n  }, [currentStation]);\n\n  // playback control\n  useEffect(() => {\n    if (audioRef.current) {\n      if (isPlaying === true) {\n        audioRef.current.play();\n      } else {\n        audioRef.current.pause();\n      }\n    }\n  }, [isPlaying]);\n\n  // volume control\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = volume;\n    }\n  }, [volume]);\n\n  function togglePlay() {\n    setIsPlaying(isPlaying ? false : true);\n  }\n\n  return (\n    <div className=\"App\">\n      <StationList\n        currentStation={currentStation}\n        setCurrentStation={setCurrentStation}\n      />\n\n      <audio\n        src={currentStation ? currentStation.streams[0].url : undefined}\n        ref={audioRef}\n      />\n\n      <div style={{ padding: 8 }}>\n        <div style={{ border: \"2px #fff solid\", display: \"flex\" }}>\n          <button\n            onClick={togglePlay}\n            style={{\n              borderRight: \"3px #ccc solid\",\n              padding: 8,\n              width: 96,\n              textAlign: \"center\",\n              backgroundColor: \"#111\",\n              color: \"#fff\",\n              fontSize: 16\n            }}\n          >\n            {isPlaying ? \"Pause\" : \"Play\"}\n          </button>\n\n          <div style={{ padding: 8 }}>\n            <div\n              style={{\n                color: \"#888\",\n                textTransform: \"uppercase\",\n                fontSize: 12,\n                letterSpacing: \"0.075rem\"\n              }}\n            >\n              Now Playing\n            </div>\n            <Marquee>\n              {(() => {\n                switch (loadingState) {\n                  case LoadingState.Loading:\n                    return <div>...</div>;\n                  case LoadingState.Ready:\n                    return <div />;\n                  case LoadingState.Success:\n                    return (\n                      <div>{currentStation ? currentStation.name : \"\"}</div>\n                    );\n                  case LoadingState.Error:\n                    return <div>An error occurred</div>;\n                }\n              })()}\n            </Marquee>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport \"./Marquee.css\";\n\nexport default function Marquee(props: { children: React.ReactNode }) {\n  return (\n    <div className=\"marquee\">\n      <div className=\"marquee-content\">{props.children}</div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}